package{	import flash.display.*;	import flash.events.*;	import flash.ui.*;	import flash.text.*;		public class WarGame extends MovieClip	{		//Decks		private var playerOne: Array = new Array();		private var playerTwo: Array = new Array();		private var warArray: Array = new Array();				//Decks on stage		private var c1:cardDeck = new cardDeck();		private var c2:cardDeck = new cardDeck();				//War Cards		private var p1Card:cardDeck = new cardDeck();		private var p2Card:cardDeck = new cardDeck();		private var p1War1:cardDeck = new cardDeck();		private var p1War2:cardDeck = new cardDeck();		private var p1War3:cardDeck = new cardDeck();		private var p2War1:cardDeck = new cardDeck();		private var p2War2:cardDeck = new cardDeck();		private var p2War3:cardDeck = new cardDeck();				//Buttons		private var sBtn:startBtn = new startBtn();		private var pBtn:playBtn = new playBtn();		private var tBtn:nextBtn = new nextBtn();		private var wBtn:warBtn = new warBtn();				//Text Fields		private var p1Field:TextField = new TextField();		private var p2Field:TextField = new TextField();		private var tFormat:TextFormat = new TextFormat();				//Dealt Cards		private var p1:cardDeck = new cardDeck();		private var p2:cardDeck = new cardDeck();				//Flag Variables		private var warHappened:uint = 0;		private var warStakes:uint;		private var deckSize:uint = 52;		private var pOneRemaining:uint;		private var pTwoRemaining:uint;			//Create the deck, shuffle the deck, and deal it out to both players	//Display the start screen		public function WarGame():void		{						var fullDeck: Array = new Array();			var shuffleDeck: Array = new Array();			var flipSwitch:uint = 0;						//Initialize the full deck			for(var i:uint = 0; i < deckSize/4; i++)			{				fullDeck.push(i);				fullDeck.push(i);				fullDeck.push(i);				fullDeck.push(i);			}						//Shuffle the full deck			for(var x:uint = 0; x < deckSize; x++)			{				var r:uint = Math.floor(Math.random()*fullDeck.length);				shuffleDeck.push(fullDeck[r]);				fullDeck.splice(r,1);			}									//1. Deal the deck to both players			for(var y:uint = 0; y < deckSize; y++)			{				if(flipSwitch == 0)				{					playerOne.push(shuffleDeck[y]);					pOneRemaining++;					flipSwitch = 1;				}				else				{					playerTwo.push(shuffleDeck[y]);					pTwoRemaining++;					flipSwitch = 0;									}			}						//trace(playerOne);			//trace(playerTwo);			sBtn.x = 150;			sBtn.y = 300;			sBtn.addEventListener(MouseEvent.CLICK,startGame);			stage.addChildAt(sBtn,0);			tBtn.x = 600;			tBtn.y = 1000;			tBtn.addEventListener(MouseEvent.CLICK,testWar);			stage.addChild(tBtn);			wBtn.x = 600;			wBtn.y = 1000;			wBtn.addEventListener(MouseEvent.CLICK,warWar);			stage.addChild(wBtn);		}			//Display the play screen with both decks and a deal button		public function startGame(event:MouseEvent)		{			stage.removeChild(sBtn);			sBtn.removeEventListener(MouseEvent.CLICK,startGame);			gotoAndStop("play");			c1.x = 45;			c2.x = 257;			c1.y = 57;			c2.y = 545;			c1.gotoAndStop(0);			c2.gotoAndStop(0);			stage.addChildAt(c1,0);			stage.addChildAt(c2,0);			p1Field.x = 12;			p1Field.y = 113;			p1Field.width = 125;			p2Field.x = 215;			p2Field.y = 475;			p2Field.width = 125;			stage.addChild(p1Field);			stage.addChild(p2Field);			pBtn.x = 150;			pBtn.y = 300;			pBtn.addEventListener(MouseEvent.CLICK,playWar);			stage.addChildAt(pBtn,0);		}	//After the user clicks the DEAL button	//Display the NEXT button and the dealt cards		public function playWar(event:MouseEvent)		{			p1Field.text = "YOU = " + playerOne.length;			p2Field.text = "COMP = " + playerTwo.length;			tFormat.size = 15;			p1Field.setTextFormat(tFormat);			p2Field.setTextFormat(tFormat);			if(pOneRemaining == 0 || pTwoRemaining == 0)			{				if(warHappened == 1)				{					stage.removeChild(p1War1);					stage.removeChild(p1War2);					stage.removeChild(p1War3);					stage.removeChild(p2War1);					stage.removeChild(p2War2);					stage.removeChild(p2War3);				}				stage.removeChild(pBtn);				stage.removeChild(wBtn);				stage.removeChild(tBtn);				stage.removeChild(c1);				stage.removeChild(c2);				stage.removeChild(p1Field);				stage.removeChild(p2Field);								if(pOneRemaining == 0)				{					gotoAndStop("lose");				}				else				{					gotoAndStop("win");				}			}			else			{				pBtn.x = 1000;				pBtn.y = 600;				tBtn.x = 150;				tBtn.y = 300;							p1.x = 150;				p2.x = 150;				p1.y = 200;				p2.y = 400;				p1.gotoAndStop(playerOne[pOneRemaining-1]+2);				p2.gotoAndStop(playerTwo[pTwoRemaining-1]+2);				stage.addChildAt(p1,0);				stage.addChildAt(p2,0);				//trace("playerOne = ",playerOne[pOneRemaining-1]);				//trace("playerTwo = ",playerTwo[pTwoRemaining-1]);							/*if(warHappened == 1)				{					trace("the stakes of war: ",warArray);				}*/			}		}		//Test the cards dealt to see who wins and adjust the arrays accordingly	//Remove the dealt cards from the screen		public function testWar(event:MouseEvent)		{			//Move the NEXT button off of the screen			tBtn.x = 600;			tBtn.y = 1000;						//If player one wins take both cards			if(playerOne[pOneRemaining-1] > playerTwo[pTwoRemaining-1])			{				playerOne.unshift(playerOne[pOneRemaining-1]);				playerOne.unshift(playerTwo[pTwoRemaining-1]);				playerTwo.pop();				playerOne.pop();				pOneRemaining++;				pTwoRemaining--;				stage.removeChild(p1);				stage.removeChild(p2);								//Display the DEAL button				pBtn.x = 150;				pBtn.y = 300;								//If war happened the previous round player one wins all of the stakes				if(warHappened == 1)				{					warStakes = warArray.length;					for(var w:uint = 0; w < warStakes; w++)					{						playerOne.unshift(warArray[warArray.length-1]);						warArray.pop();						pOneRemaining++;					}					warHappened = 0;					stage.removeChild(p1War1);					stage.removeChild(p1War2);					stage.removeChild(p1War3);					stage.removeChild(p2War1);					stage.removeChild(p2War2);					stage.removeChild(p2War3);				}				//trace("Player One Wins!");				//trace("Player One has ",pOneRemaining," cards left.");				//trace("Player Two has ",pTwoRemaining," cards left.");				//trace("Player One: ",playerOne);				//trace("Player Two: ",playerTwo);			}						//If player two wins, take both cards			else if(playerOne[pOneRemaining-1] < playerTwo[pTwoRemaining-1])			{				playerTwo.unshift(playerTwo[pTwoRemaining-1]);				playerTwo.unshift(playerOne[pOneRemaining-1]);				playerOne.pop();				playerTwo.pop();				pOneRemaining--;				pTwoRemaining++;				stage.removeChild(p1);				stage.removeChild(p2);								//Display the DEAL button				pBtn.x = 150;				pBtn.y = 300;				if(warHappened == 1)				{					warStakes = warArray.length;					for(var k:uint = 0; k < warStakes; k++)					{						playerTwo.unshift(warArray[warArray.length-1]);						warArray.pop();						pTwoRemaining++;					}					warHappened = 0;					stage.removeChild(p1War1);					stage.removeChild(p1War2);					stage.removeChild(p1War3);					stage.removeChild(p2War1);					stage.removeChild(p2War2);					stage.removeChild(p2War3);				}				//trace("Player Two Wins!");				//trace("Player One has ",pOneRemaining," cards left.");				//trace("Player Two has ",pTwoRemaining," cards left.");				//trace("Player One: ",playerOne);				//trace("Player Two: ",playerTwo);			}			else if(playerOne[pOneRemaining-1] == playerTwo[pTwoRemaining-1])			{				//trace("war");				wBtn.x = 150;				wBtn.y = 300;			}		}			//Put out cards if the 		public function warWar(event:MouseEvent)		{			//Replace the War Button with the Deal Button			pBtn.x = 150;			pBtn.y = 300;			wBtn.x = 600;			wBtn.y = 1000;			if(pOneRemaining < 4 || pTwoRemaining < 4)			{				if(pOneRemaining < 4)				{					var oneLost:uint = pOneRemaining;					for(var s:uint = 0; s < oneLost; s++)					{						playerTwo.unshift(playerOne[pOneRemaining-1]);						playerOne.pop();						pOneRemaining--;						pTwoRemaining++;					}				}				else if(pTwoRemaining < 4)				{					var TwoLost:uint = pTwoRemaining;					for(var q:uint = 0; q < TwoLost; q++)					{						playerOne.unshift(playerTwo[pTwoRemaining-1]);						playerTwo.pop();						pTwoRemaining--;						pOneRemaining++;					}				}			}			else			{				//Add the 3 cards to the stage from both players that represent the War				warHappened = 1;				p1War1.x = 150;				p1War2.x = 200;				p1War3.x = 250;				p2War1.x = 50;				p2War2.x = 100;				p2War3.x = 150;				p1War1.y = 90;				p1War2.y = 90;				p1War3.y = 90;				p2War1.y = 510;				p2War2.y = 510;				p2War3.y = 510;				p1War1.gotoAndStop(0);				p1War2.gotoAndStop(0);				p1War3.gotoAndStop(0);				p2War1.gotoAndStop(0);				p2War2.gotoAndStop(0);				p2War3.gotoAndStop(0);				stage.addChildAt(p1War1,0);				stage.addChildAt(p1War2,0);				stage.addChildAt(p1War3,0);				stage.addChildAt(p2War1,0);				stage.addChildAt(p2War2,0);				stage.addChildAt(p2War3,0);								//Account for the first 2 cards that started the War				warArray.push(playerOne[pOneRemaining-1]);				playerOne.pop();				pOneRemaining--;				warArray.push(playerTwo[pTwoRemaining-1]);				playerTwo.pop();				pTwoRemaining--;							//Account for the 3 cards from each player that represent the War				warArray.push(playerOne[pOneRemaining-1]);				playerOne.pop();				pOneRemaining--;				warArray.push(playerOne[pOneRemaining-1]);				playerOne.pop();				pOneRemaining--;				warArray.push(playerOne[pOneRemaining-1]);				playerOne.pop();				pOneRemaining--;				warArray.push(playerTwo[pTwoRemaining-1]);				playerTwo.pop();				pTwoRemaining--;				warArray.push(playerTwo[pTwoRemaining-1]);				playerTwo.pop();				pTwoRemaining--;				warArray.push(playerTwo[pTwoRemaining-1]);				playerTwo.pop();				pTwoRemaining--;			}		}	}}